from Matriz import Matriz
from Calculos import Calculos
import numpy as np

 
def matrix_dot(self, matriz1, matriz2):
    calculos = Calculos(matriz1, matriz2)  # Instancia corretamente Calculos
    return calculos.dot() # Chama o método dot sem passar parâmetros

class Transformations:
    
    # Translação (2D e 3D)
    def translate2D(self, vector, dx, dy):
        matrix = [[1, 0, dx],
                  [0, 1, dy],
                  [0, 0, 1]]
        homogeneous_vector = [vector[0], vector[1], 1]
        result = matrix_dot(matrix, homogeneous_vector)
        return result[:2]  # Retorna para o sistema cartesiano 2D

    def translate3D(self, vector, dx, dy, dz):
        matrix = [[1, 0, 0, dx],
                  [0, 1, 0, dy],
                  [0, 0, 1, dz],
                  [0, 0, 0, 1]]
        homogeneous_vector = [vector[0], vector[1], vector[2], 1]
        result = matrix_dot(matrix, homogeneous_vector)
        return result[:3]  # Retorna para o sistema cartesiano 3D

    # Rotação (2D e 3D)
    def rotation2D(self, vector, angle):
        radians = np.radians(angle)
        matrix = [[np.cos(radians), -np.sin(radians)],
                  [np.sin(radians), np.cos(radians)]]
        return matrix_dot(matrix, vector)

    def rotation3DX(self, vector, angle):
        radians = np.radians(angle)
        matrix = [[1, 0, 0],
                  [0, np.cos(radians), -np.sin(radians)],
                  [0, np.sin(radians), np.cos(radians)]]
        return matrix_dot(matrix, vector)

    def rotation3DY(self, vector, angle):
        radians = np.radians(angle)
        matrix = [[np.cos(radians), 0, np.sin(radians)],
                  [0, 1, 0],
                  [-np.sin(radians), 0, np.cos(radians)]]
        return matrix_dot(matrix, vector)

    def rotation3DZ(self, vector, angle):
        radians = np.radians(angle)
        matrix = [[np.cos(radians), -np.sin(radians), 0],
                  [np.sin(radians), np.cos(radians), 0],
                  [0, 0, 1]]
        return matrix_dot(matrix, vector)

    # Reflexão (2D e 3D)
    def reflection2DX(self, vector):
        matrix = [[1, 0], [0, -1]]
        return matrix_dot(matrix, vector)

    def reflection2DY(self, vector):
        matrix = [[-1, 0], [0, 1]]
        return matrix_dot(matrix, vector)

    def reflection3DX(self, vector):
        matrix = [[1, 0, 0], [0, -1, 0], [0, 0, -1]]
        return matrix_dot(matrix, vector)

    def reflection3DY(self, vector):
        matrix = [[-1, 0, 0], [0, 1, 0], [0, 0, -1]]
        return matrix_dot(matrix, vector)

    def reflection3DZ(self, vector):
        matrix = [[-1, 0, 0], [0, -1, 0], [0, 0, 1]]
        return matrix_dot(matrix, vector)

    # Projeção (2D e 3D)
    def projection2DX(self, vector):
        matrix = [[1, 0], [0, 0]]
        return matrix_dot(matrix, vector)

    def projection2DY(self, vector):
        matrix = [[0, 0], [0, 1]]
        return matrix_dot(matrix, vector)

    def projection3DX(self, vector):
        matrix = [[1, 0, 0], [0, 0, 0], [0, 0, 0]]
        return matrix_dot(matrix, vector)

    def projection3DY(self, vector):
        matrix = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]
        return matrix_dot(matrix, vector)

    def projection3DZ(self, vector):
        matrix = [[0, 0, 0], [0, 0, 0], [0, 0, 1]]
        return matrix_dot(matrix, vector)

    # Cisalhamento (Apenas 2D)
    def shearing(self, vector, kx, ky):
        matrix = [[1, kx], [ky, 1]]
        return matrix_dot(matrix, vector)

# Exemplo de Uso

